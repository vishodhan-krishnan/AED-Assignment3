/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package professor;

import classes.CourseCreation;
import classes.CourseCreationHistory;
import classes.Professor;
import classes.Student;
import classes.StudentDirectory;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pchok
 */
public class GradeCoursesJPanel extends javax.swing.JPanel {

    /**
     * Creates new form GradeCoursesJPanel
     */
    JPanel workareaContainer;
    Professor prof;
    StudentDirectory studentDir;
    CourseCreationHistory cch;
    Student searchedStudent;
    Student student;
    HashMap studentCourseHashMap;
    ArrayList<CourseCreation> CoursestoGrade;
    //HashMap<String, ArrayList> studentCourseHashMap;
    //ArrayList<CourseCreation> CoursestoGrade;
    public GradeCoursesJPanel(JPanel jp, StudentDirectory studentDir, CourseCreationHistory CourseHistory, Professor prof, Student searchedStudent, Student student) {
        this.prof = prof;
        this.cch = CourseHistory;
        this.workareaContainer = jp;
        this.studentDir = studentDir;
        this.searchedStudent = searchedStudent;
        this.student = student;
//        studentCourseHashMap = new HashMap();
        initComponents();
       // populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        FacultyJTable = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtCourseName = new javax.swing.JTextField();
        txtGrade = new javax.swing.JTextField();
        txtUserid = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        txtCourseSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        btnBack.setText("Back <");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        FacultyJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Course", "Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(FacultyJTable);

        jLabel2.setText("Name");

        jLabel3.setText("Student ID");

        jLabel4.setText("Course");

        jLabel5.setText("Grade");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtCourseSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCourseSearchActionPerformed(evt);
            }
        });

        jLabel1.setText("Course name");

        jLabel6.setText("Student ID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(223, 223, 223)
                .addComponent(btnUpdate)
                .addContainerGap(572, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btnBack)
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                        .addComponent(txtCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtUserid, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(145, 145, 145)
                                .addComponent(btnSearch)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtCourseSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtCourseSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtUserid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(btnSearch)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(btnUpdate)
                .addContainerGap(135, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        // TODO add your handling code here:
        workareaContainer.remove(this);
        ((java.awt.CardLayout) workareaContainer.getLayout()).previous(workareaContainer);
        //       ((java.awt.CardLayout)CardSequencePanel.getLayout()).show(CardSequencePanel, "IdentifyEventTypes");

    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String searchQuery = txtSearch.getText();
        //StudentDirectory studentdir = new StudentDirectory();
        searchedStudent = studentDir.searchStudent(searchQuery);
        System.out.println( searchedStudent.getStudentNUID());
        if(searchedStudent == null){
            JOptionPane.showMessageDialog(this, "Student does not exist.");
            txtCourseName.setText("");
            txtUserid.setText("");
            txtName.setText("");
            txtGrade.setText("");
        }
        else{
//             ArrayList<Integer> marksentered = new ArrayList<>();
//             marksentered.add(Integer.parseInt(txtGrade.getText()));
//             studentMarksMap.put(searchedStudent, marksentered);
                String SearchedNEUID = searchedStudent.getStudentNUID();
                
               studentCourseHashMap = student.getMapStudenttoCourse();
               CoursestoGrade = (ArrayList) studentCourseHashMap.get(SearchedNEUID);
               
                if (CoursestoGrade != null) {
                    
                    System.out.println();
                for(CourseCreation CG: CoursestoGrade){
                 System.out.println(CG.getCourseDetails());
                }
               for(CourseCreation CG: CoursestoGrade){
              if(CG.getCourseName().equals(txtCourseSearch.getText())){
                  
                  txtUserid.setText(searchedStudent.getStudentNUID());
                  txtName.setText(searchedStudent.getStudentName());
                  txtCourseName.setText(CG.getCourseName());
                  
              }
               }
                }
    // You can safely work with CoursestoGrade here
                else {
                 JOptionPane.showMessageDialog(this, "Course not found for the student.");// Handle the case where the key is not found
                      }

                
              
        
        
        
               //CourseCreation CourseToGrade = CoursestoGrade.get(CoursestoGrade.indexOf(txtCourseSearch.getText()));
              // CourseToGrade.setGrades(txtGrade.getText());
               System.out.println();
        }
        
        
        
//        boolean resultFound = false;
//        for (Student student : studentDir.getStudentDirectory()) {
//            if (searchQuery.equals(student.getStudentNUID())) {
//                txtCourseName.setText(student.getSelectedCourse().getCourseName());
//                txtUserid.setText(student.getStudentNUID());
//                                txtName.setText(student.getStudentName());
//                                txtGrade.setText(student.getGrade());
//                resultFound = true;
//                break;
//            }
//        }
//        if (!resultFound) {
//            JOptionPane.showMessageDialog(this, "Student does not exist.");
//            txtCourseName.setText("");
//            txtUserid.setText("");
//            txtName.setText("");
//            txtGrade.setText("");
//        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
//        // TODO add your handling code here:

            

//        String studentName = txtName.getText();
//        String courseName = txtCourseName.getText();
//        String updatedGradeText = txtGrade.getText();
//
//        if (studentName.isEmpty() || courseName.isEmpty() || updatedGradeText.isEmpty()) {
//            JOptionPane.showMessageDialog(this, "Please fill in all fields.");
//            return;
//        }
//
//        try {
//            double updatedGrade = Double.parseDouble(updatedGradeText);
//
//            // Find the student in your list of students by name
//            StudentDirectory studentToUpdate = null;
////            for (StudentDirectory student : students) {
////                if (student.getName().equals(studentName)) {
////                    studentToUpdate = student;
////                    break;
////                }
////            }
//
//            if (studentToUpdate == null) {
//                JOptionPane.showMessageDialog(this, "Student not found.");
//            } else {
//                // Find and update the grade for the specified course
//                boolean courseFound = false;
////                for (Course course : studentToUpdate.getCourses()) {
////                    if (course.getCourseName().equals(courseName)) {
////                        course.setGrade(updatedGrade);
////                        courseFound = true;
////                        break;
////                    }
////                }
//
//                if (courseFound) {
//                    // Update the table with the new data
//                   // populateTable();
//                    JOptionPane.showMessageDialog(this, "Grade updated successfully.");
//                } else {
//                    JOptionPane.showMessageDialog(this, "Course not found for the student.");
//                }
//            }
//        } catch (NumberFormatException e) {
//            JOptionPane.showMessageDialog(this, "Invalid grade value. Please enter a numeric value.");
//        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtCourseSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCourseSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCourseSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable FacultyJTable;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtCourseName;
    private javax.swing.JTextField txtCourseSearch;
    private javax.swing.JTextField txtGrade;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtUserid;
    // End of variables declaration//GEN-END:variables
//  private void populateTable() {
//        DefaultTableModel dtm = (DefaultTableModel) FacultyJTable.getModel();
//        dtm.setRowCount(0);
//        for (Student s : studentDir.getStudentDirectory()) {
//            System.out.println(s.getStudentName());
//            System.out.println(s.getEnrolledCourses(s.getStudentNUID()));
//            System.out.println(s.getSelectedCoursesList());
//            System.out.println(s.getSelectedCourse());
//        }
//
//        for (Student student : studentDir.getStudentDirectory()) {
//            for (CourseCreation cc : student.getSelectedCoursesList()) {
//                Object[] row = new Object[4];
//                row[0] = student.getStudentNUID();
//                row[2] = cc.getCourseName();
////            row[1] = student.getName();
////            row[2] = course.getCourseName();
////            row[3] = course.getGrade();
//                dtm.addRow(row);
//            }
//
//        }
    }


